---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

export const buttonVariants = cva("button", {
	variants: {
		variant: {
			default: "bg-primary text-primary-foreground hover:bg-primary/90",
			destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
			outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
			secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
			ghost: "hover:bg-accent hover:text-accent-foreground",
			link: "text-primary underline-offset-4 hover:underline",
		},
		size: {
			default: "h-10 px-4 py-2",
			sm: "h-9 rounded-md px-3",
			lg: "h-11 rounded-md px-8",
			icon: "h-10 w-10",
		},
	},
});

export interface Props extends HTMLAttributes<"button">, VariantProps<typeof buttonVariants> {
	asChild?: boolean;
}

const {
	class: className,
	asChild,
	type,
	variant = "default",
	size = "default",
	...props
} = Astro.props;

const Comp = asChild ? "slot" : "button";
---

<Comp type={type} class:list={buttonVariants({ variant, size, className })} {...props}>
	<slot />
</Comp>
